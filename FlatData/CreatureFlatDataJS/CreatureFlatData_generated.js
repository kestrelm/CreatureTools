// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
*/
var CreatureFlatData = CreatureFlatData || {};

/**
 * @constructor
 */
CreatureFlatData.meshRegionBone = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.meshRegionBone}
 */
CreatureFlatData.meshRegionBone.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.meshRegionBone=} obj
 * @returns {CreatureFlatData.meshRegionBone}
 */
CreatureFlatData.meshRegionBone.getRootAsmeshRegionBone = function(bb, obj) {
  return (obj || new CreatureFlatData.meshRegionBone).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
CreatureFlatData.meshRegionBone.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.meshRegionBone.prototype.weights = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.meshRegionBone.prototype.weightsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.meshRegionBone.prototype.weightsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.meshRegionBone.startmeshRegionBone = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
CreatureFlatData.meshRegionBone.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} weightsOffset
 */
CreatureFlatData.meshRegionBone.addWeights = function(builder, weightsOffset) {
  builder.addFieldOffset(1, weightsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.meshRegionBone.createWeightsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.meshRegionBone.startWeightsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.meshRegionBone.endmeshRegionBone = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.meshRegion = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.meshRegion}
 */
CreatureFlatData.meshRegion.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.meshRegion=} obj
 * @returns {CreatureFlatData.meshRegion}
 */
CreatureFlatData.meshRegion.getRootAsmeshRegion = function(bb, obj) {
  return (obj || new CreatureFlatData.meshRegion).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
CreatureFlatData.meshRegion.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.meshRegion.prototype.startPtIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.meshRegion.prototype.endPtIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.meshRegion.prototype.startIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.meshRegion.prototype.endIndex = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.meshRegion.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @param {CreatureFlatData.meshRegionBone=} obj
 * @returns {CreatureFlatData.meshRegionBone}
 */
CreatureFlatData.meshRegion.prototype.weights = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? (obj || new CreatureFlatData.meshRegionBone).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.meshRegion.prototype.weightsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 16);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.meshRegion.startmeshRegion = function(builder) {
  builder.startObject(7);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
CreatureFlatData.meshRegion.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} startPtIndex
 */
CreatureFlatData.meshRegion.addStartPtIndex = function(builder, startPtIndex) {
  builder.addFieldInt32(1, startPtIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} endPtIndex
 */
CreatureFlatData.meshRegion.addEndPtIndex = function(builder, endPtIndex) {
  builder.addFieldInt32(2, endPtIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} startIndex
 */
CreatureFlatData.meshRegion.addStartIndex = function(builder, startIndex) {
  builder.addFieldInt32(3, startIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} endIndex
 */
CreatureFlatData.meshRegion.addEndIndex = function(builder, endIndex) {
  builder.addFieldInt32(4, endIndex, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
CreatureFlatData.meshRegion.addId = function(builder, id) {
  builder.addFieldInt32(5, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} weightsOffset
 */
CreatureFlatData.meshRegion.addWeights = function(builder, weightsOffset) {
  builder.addFieldOffset(6, weightsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.meshRegion.createWeightsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.meshRegion.startWeightsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.meshRegion.endmeshRegion = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.mesh = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.mesh}
 */
CreatureFlatData.mesh.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.mesh=} obj
 * @returns {CreatureFlatData.mesh}
 */
CreatureFlatData.mesh.getRootAsmesh = function(bb, obj) {
  return (obj || new CreatureFlatData.mesh).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.mesh.prototype.points = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.mesh.prototype.pointsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.mesh.prototype.pointsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.mesh.prototype.uvs = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.mesh.prototype.uvsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.mesh.prototype.uvsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.mesh.prototype.indices = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.mesh.prototype.indicesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
CreatureFlatData.mesh.prototype.indicesArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @param {CreatureFlatData.meshRegion=} obj
 * @returns {CreatureFlatData.meshRegion}
 */
CreatureFlatData.mesh.prototype.regions = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new CreatureFlatData.meshRegion).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.mesh.prototype.regionsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.mesh.startmesh = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pointsOffset
 */
CreatureFlatData.mesh.addPoints = function(builder, pointsOffset) {
  builder.addFieldOffset(0, pointsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.mesh.createPointsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.mesh.startPointsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} uvsOffset
 */
CreatureFlatData.mesh.addUvs = function(builder, uvsOffset) {
  builder.addFieldOffset(1, uvsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.mesh.createUvsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.mesh.startUvsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} indicesOffset
 */
CreatureFlatData.mesh.addIndices = function(builder, indicesOffset) {
  builder.addFieldOffset(2, indicesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.mesh.createIndicesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.mesh.startIndicesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} regionsOffset
 */
CreatureFlatData.mesh.addRegions = function(builder, regionsOffset) {
  builder.addFieldOffset(3, regionsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.mesh.createRegionsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.mesh.startRegionsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.mesh.endmesh = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.skeletonBone = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.skeletonBone}
 */
CreatureFlatData.skeletonBone.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.skeletonBone=} obj
 * @returns {CreatureFlatData.skeletonBone}
 */
CreatureFlatData.skeletonBone.getRootAsskeletonBone = function(bb, obj) {
  return (obj || new CreatureFlatData.skeletonBone).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
CreatureFlatData.skeletonBone.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.skeletonBone.prototype.id = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.skeletonBone.prototype.restParentMat = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.skeletonBone.prototype.restParentMatLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.skeletonBone.prototype.restParentMatArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.skeletonBone.prototype.localRestStartPt = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.skeletonBone.prototype.localRestStartPtLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.skeletonBone.prototype.localRestStartPtArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.skeletonBone.prototype.localRestEndPt = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.skeletonBone.prototype.localRestEndPtLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.skeletonBone.prototype.localRestEndPtArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.skeletonBone.prototype.children = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.skeletonBone.prototype.childrenLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Int32Array}
 */
CreatureFlatData.skeletonBone.prototype.childrenArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.skeletonBone.startskeletonBone = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
CreatureFlatData.skeletonBone.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} id
 */
CreatureFlatData.skeletonBone.addId = function(builder, id) {
  builder.addFieldInt32(1, id, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} restParentMatOffset
 */
CreatureFlatData.skeletonBone.addRestParentMat = function(builder, restParentMatOffset) {
  builder.addFieldOffset(2, restParentMatOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.skeletonBone.createRestParentMatVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.skeletonBone.startRestParentMatVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} localRestStartPtOffset
 */
CreatureFlatData.skeletonBone.addLocalRestStartPt = function(builder, localRestStartPtOffset) {
  builder.addFieldOffset(3, localRestStartPtOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.skeletonBone.createLocalRestStartPtVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.skeletonBone.startLocalRestStartPtVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} localRestEndPtOffset
 */
CreatureFlatData.skeletonBone.addLocalRestEndPt = function(builder, localRestEndPtOffset) {
  builder.addFieldOffset(4, localRestEndPtOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.skeletonBone.createLocalRestEndPtVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.skeletonBone.startLocalRestEndPtVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} childrenOffset
 */
CreatureFlatData.skeletonBone.addChildren = function(builder, childrenOffset) {
  builder.addFieldOffset(5, childrenOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.skeletonBone.createChildrenVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.skeletonBone.startChildrenVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.skeletonBone.endskeletonBone = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.skeleton = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.skeleton}
 */
CreatureFlatData.skeleton.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.skeleton=} obj
 * @returns {CreatureFlatData.skeleton}
 */
CreatureFlatData.skeleton.getRootAsskeleton = function(bb, obj) {
  return (obj || new CreatureFlatData.skeleton).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {CreatureFlatData.skeletonBone=} obj
 * @returns {CreatureFlatData.skeletonBone}
 */
CreatureFlatData.skeleton.prototype.bones = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.skeletonBone).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.skeleton.prototype.bonesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.skeleton.startskeleton = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bonesOffset
 */
CreatureFlatData.skeleton.addBones = function(builder, bonesOffset) {
  builder.addFieldOffset(0, bonesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.skeleton.createBonesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.skeleton.startBonesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.skeleton.endskeleton = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationBone = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationBone}
 */
CreatureFlatData.animationBone.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationBone=} obj
 * @returns {CreatureFlatData.animationBone}
 */
CreatureFlatData.animationBone.getRootAsanimationBone = function(bb, obj) {
  return (obj || new CreatureFlatData.animationBone).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
CreatureFlatData.animationBone.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.animationBone.prototype.startPt = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationBone.prototype.startPtLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.animationBone.prototype.startPtArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.animationBone.prototype.endPt = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationBone.prototype.endPtLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.animationBone.prototype.endPtArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationBone.startanimationBone = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
CreatureFlatData.animationBone.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} startPtOffset
 */
CreatureFlatData.animationBone.addStartPt = function(builder, startPtOffset) {
  builder.addFieldOffset(1, startPtOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationBone.createStartPtVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationBone.startStartPtVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} endPtOffset
 */
CreatureFlatData.animationBone.addEndPt = function(builder, endPtOffset) {
  builder.addFieldOffset(2, endPtOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationBone.createEndPtVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationBone.startEndPtVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationBone.endanimationBone = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationBonesTimeSample = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationBonesTimeSample}
 */
CreatureFlatData.animationBonesTimeSample.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationBonesTimeSample=} obj
 * @returns {CreatureFlatData.animationBonesTimeSample}
 */
CreatureFlatData.animationBonesTimeSample.getRootAsanimationBonesTimeSample = function(bb, obj) {
  return (obj || new CreatureFlatData.animationBonesTimeSample).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {CreatureFlatData.animationBone=} obj
 * @returns {CreatureFlatData.animationBone}
 */
CreatureFlatData.animationBonesTimeSample.prototype.bones = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.animationBone).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationBonesTimeSample.prototype.bonesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationBonesTimeSample.prototype.time = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationBonesTimeSample.startanimationBonesTimeSample = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bonesOffset
 */
CreatureFlatData.animationBonesTimeSample.addBones = function(builder, bonesOffset) {
  builder.addFieldOffset(0, bonesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationBonesTimeSample.createBonesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationBonesTimeSample.startBonesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} time
 */
CreatureFlatData.animationBonesTimeSample.addTime = function(builder, time) {
  builder.addFieldInt32(1, time, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationBonesTimeSample.endanimationBonesTimeSample = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationBonesList = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationBonesList}
 */
CreatureFlatData.animationBonesList.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationBonesList=} obj
 * @returns {CreatureFlatData.animationBonesList}
 */
CreatureFlatData.animationBonesList.getRootAsanimationBonesList = function(bb, obj) {
  return (obj || new CreatureFlatData.animationBonesList).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {CreatureFlatData.animationBonesTimeSample=} obj
 * @returns {CreatureFlatData.animationBonesTimeSample}
 */
CreatureFlatData.animationBonesList.prototype.timeSamples = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.animationBonesTimeSample).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationBonesList.prototype.timeSamplesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationBonesList.startanimationBonesList = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} timeSamplesOffset
 */
CreatureFlatData.animationBonesList.addTimeSamples = function(builder, timeSamplesOffset) {
  builder.addFieldOffset(0, timeSamplesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationBonesList.createTimeSamplesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationBonesList.startTimeSamplesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationBonesList.endanimationBonesList = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationMesh = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationMesh}
 */
CreatureFlatData.animationMesh.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationMesh=} obj
 * @returns {CreatureFlatData.animationMesh}
 */
CreatureFlatData.animationMesh.getRootAsanimationMesh = function(bb, obj) {
  return (obj || new CreatureFlatData.animationMesh).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
CreatureFlatData.animationMesh.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {boolean}
 */
CreatureFlatData.animationMesh.prototype.useDq = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
CreatureFlatData.animationMesh.prototype.useLocalDisplacements = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @returns {boolean}
 */
CreatureFlatData.animationMesh.prototype.usePostDisplacements = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.animationMesh.prototype.localDisplacements = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationMesh.prototype.localDisplacementsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.animationMesh.prototype.localDisplacementsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.animationMesh.prototype.postDisplacements = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationMesh.prototype.postDisplacementsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.animationMesh.prototype.postDisplacementsArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationMesh.startanimationMesh = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
CreatureFlatData.animationMesh.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} useDq
 */
CreatureFlatData.animationMesh.addUseDq = function(builder, useDq) {
  builder.addFieldInt8(1, +useDq, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} useLocalDisplacements
 */
CreatureFlatData.animationMesh.addUseLocalDisplacements = function(builder, useLocalDisplacements) {
  builder.addFieldInt8(2, +useLocalDisplacements, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} usePostDisplacements
 */
CreatureFlatData.animationMesh.addUsePostDisplacements = function(builder, usePostDisplacements) {
  builder.addFieldInt8(3, +usePostDisplacements, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} localDisplacementsOffset
 */
CreatureFlatData.animationMesh.addLocalDisplacements = function(builder, localDisplacementsOffset) {
  builder.addFieldOffset(4, localDisplacementsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationMesh.createLocalDisplacementsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationMesh.startLocalDisplacementsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} postDisplacementsOffset
 */
CreatureFlatData.animationMesh.addPostDisplacements = function(builder, postDisplacementsOffset) {
  builder.addFieldOffset(5, postDisplacementsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationMesh.createPostDisplacementsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationMesh.startPostDisplacementsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationMesh.endanimationMesh = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationMeshTimeSample = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationMeshTimeSample}
 */
CreatureFlatData.animationMeshTimeSample.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationMeshTimeSample=} obj
 * @returns {CreatureFlatData.animationMeshTimeSample}
 */
CreatureFlatData.animationMeshTimeSample.getRootAsanimationMeshTimeSample = function(bb, obj) {
  return (obj || new CreatureFlatData.animationMeshTimeSample).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {CreatureFlatData.animationMesh=} obj
 * @returns {CreatureFlatData.animationMesh}
 */
CreatureFlatData.animationMeshTimeSample.prototype.meshes = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.animationMesh).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationMeshTimeSample.prototype.meshesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationMeshTimeSample.prototype.time = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationMeshTimeSample.startanimationMeshTimeSample = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} meshesOffset
 */
CreatureFlatData.animationMeshTimeSample.addMeshes = function(builder, meshesOffset) {
  builder.addFieldOffset(0, meshesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationMeshTimeSample.createMeshesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationMeshTimeSample.startMeshesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} time
 */
CreatureFlatData.animationMeshTimeSample.addTime = function(builder, time) {
  builder.addFieldInt32(1, time, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationMeshTimeSample.endanimationMeshTimeSample = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationMeshList = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationMeshList}
 */
CreatureFlatData.animationMeshList.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationMeshList=} obj
 * @returns {CreatureFlatData.animationMeshList}
 */
CreatureFlatData.animationMeshList.getRootAsanimationMeshList = function(bb, obj) {
  return (obj || new CreatureFlatData.animationMeshList).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {CreatureFlatData.animationMeshTimeSample=} obj
 * @returns {CreatureFlatData.animationMeshTimeSample}
 */
CreatureFlatData.animationMeshList.prototype.timeSamples = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.animationMeshTimeSample).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationMeshList.prototype.timeSamplesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationMeshList.startanimationMeshList = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} timeSamplesOffset
 */
CreatureFlatData.animationMeshList.addTimeSamples = function(builder, timeSamplesOffset) {
  builder.addFieldOffset(0, timeSamplesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationMeshList.createTimeSamplesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationMeshList.startTimeSamplesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationMeshList.endanimationMeshList = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationUVSwap = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationUVSwap}
 */
CreatureFlatData.animationUVSwap.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationUVSwap=} obj
 * @returns {CreatureFlatData.animationUVSwap}
 */
CreatureFlatData.animationUVSwap.getRootAsanimationUVSwap = function(bb, obj) {
  return (obj || new CreatureFlatData.animationUVSwap).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
CreatureFlatData.animationUVSwap.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.animationUVSwap.prototype.localOffset = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationUVSwap.prototype.localOffsetLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.animationUVSwap.prototype.localOffsetArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.animationUVSwap.prototype.globalOffset = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationUVSwap.prototype.globalOffsetLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.animationUVSwap.prototype.globalOffsetArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.animationUVSwap.prototype.scale = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationUVSwap.prototype.scaleLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.animationUVSwap.prototype.scaleArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @returns {boolean}
 */
CreatureFlatData.animationUVSwap.prototype.enabled = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationUVSwap.startanimationUVSwap = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
CreatureFlatData.animationUVSwap.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} localOffsetOffset
 */
CreatureFlatData.animationUVSwap.addLocalOffset = function(builder, localOffsetOffset) {
  builder.addFieldOffset(1, localOffsetOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationUVSwap.createLocalOffsetVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationUVSwap.startLocalOffsetVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} globalOffsetOffset
 */
CreatureFlatData.animationUVSwap.addGlobalOffset = function(builder, globalOffsetOffset) {
  builder.addFieldOffset(2, globalOffsetOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationUVSwap.createGlobalOffsetVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationUVSwap.startGlobalOffsetVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} scaleOffset
 */
CreatureFlatData.animationUVSwap.addScale = function(builder, scaleOffset) {
  builder.addFieldOffset(3, scaleOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationUVSwap.createScaleVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationUVSwap.startScaleVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} enabled
 */
CreatureFlatData.animationUVSwap.addEnabled = function(builder, enabled) {
  builder.addFieldInt8(4, +enabled, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationUVSwap.endanimationUVSwap = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationUVSwapTimeSample = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationUVSwapTimeSample}
 */
CreatureFlatData.animationUVSwapTimeSample.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationUVSwapTimeSample=} obj
 * @returns {CreatureFlatData.animationUVSwapTimeSample}
 */
CreatureFlatData.animationUVSwapTimeSample.getRootAsanimationUVSwapTimeSample = function(bb, obj) {
  return (obj || new CreatureFlatData.animationUVSwapTimeSample).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {CreatureFlatData.animationUVSwap=} obj
 * @returns {CreatureFlatData.animationUVSwap}
 */
CreatureFlatData.animationUVSwapTimeSample.prototype.uvSwaps = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.animationUVSwap).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationUVSwapTimeSample.prototype.uvSwapsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationUVSwapTimeSample.prototype.time = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationUVSwapTimeSample.startanimationUVSwapTimeSample = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} uvSwapsOffset
 */
CreatureFlatData.animationUVSwapTimeSample.addUvSwaps = function(builder, uvSwapsOffset) {
  builder.addFieldOffset(0, uvSwapsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationUVSwapTimeSample.createUvSwapsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationUVSwapTimeSample.startUvSwapsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} time
 */
CreatureFlatData.animationUVSwapTimeSample.addTime = function(builder, time) {
  builder.addFieldInt32(1, time, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationUVSwapTimeSample.endanimationUVSwapTimeSample = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationUVSwapList = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationUVSwapList}
 */
CreatureFlatData.animationUVSwapList.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationUVSwapList=} obj
 * @returns {CreatureFlatData.animationUVSwapList}
 */
CreatureFlatData.animationUVSwapList.getRootAsanimationUVSwapList = function(bb, obj) {
  return (obj || new CreatureFlatData.animationUVSwapList).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {CreatureFlatData.animationUVSwapTimeSample=} obj
 * @returns {CreatureFlatData.animationUVSwapTimeSample}
 */
CreatureFlatData.animationUVSwapList.prototype.timeSamples = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.animationUVSwapTimeSample).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationUVSwapList.prototype.timeSamplesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationUVSwapList.startanimationUVSwapList = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} timeSamplesOffset
 */
CreatureFlatData.animationUVSwapList.addTimeSamples = function(builder, timeSamplesOffset) {
  builder.addFieldOffset(0, timeSamplesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationUVSwapList.createTimeSamplesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationUVSwapList.startTimeSamplesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationUVSwapList.endanimationUVSwapList = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationMeshOpacity = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationMeshOpacity}
 */
CreatureFlatData.animationMeshOpacity.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationMeshOpacity=} obj
 * @returns {CreatureFlatData.animationMeshOpacity}
 */
CreatureFlatData.animationMeshOpacity.getRootAsanimationMeshOpacity = function(bb, obj) {
  return (obj || new CreatureFlatData.animationMeshOpacity).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
CreatureFlatData.animationMeshOpacity.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationMeshOpacity.prototype.opacity = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationMeshOpacity.startanimationMeshOpacity = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
CreatureFlatData.animationMeshOpacity.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} opacity
 */
CreatureFlatData.animationMeshOpacity.addOpacity = function(builder, opacity) {
  builder.addFieldFloat32(1, opacity, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationMeshOpacity.endanimationMeshOpacity = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationMeshOpacityTimeSample = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationMeshOpacityTimeSample}
 */
CreatureFlatData.animationMeshOpacityTimeSample.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationMeshOpacityTimeSample=} obj
 * @returns {CreatureFlatData.animationMeshOpacityTimeSample}
 */
CreatureFlatData.animationMeshOpacityTimeSample.getRootAsanimationMeshOpacityTimeSample = function(bb, obj) {
  return (obj || new CreatureFlatData.animationMeshOpacityTimeSample).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {CreatureFlatData.animationMeshOpacity=} obj
 * @returns {CreatureFlatData.animationMeshOpacity}
 */
CreatureFlatData.animationMeshOpacityTimeSample.prototype.meshOpacities = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.animationMeshOpacity).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationMeshOpacityTimeSample.prototype.meshOpacitiesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationMeshOpacityTimeSample.prototype.time = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationMeshOpacityTimeSample.startanimationMeshOpacityTimeSample = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} meshOpacitiesOffset
 */
CreatureFlatData.animationMeshOpacityTimeSample.addMeshOpacities = function(builder, meshOpacitiesOffset) {
  builder.addFieldOffset(0, meshOpacitiesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationMeshOpacityTimeSample.createMeshOpacitiesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationMeshOpacityTimeSample.startMeshOpacitiesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} time
 */
CreatureFlatData.animationMeshOpacityTimeSample.addTime = function(builder, time) {
  builder.addFieldInt32(1, time, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationMeshOpacityTimeSample.endanimationMeshOpacityTimeSample = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationMeshOpacityList = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationMeshOpacityList}
 */
CreatureFlatData.animationMeshOpacityList.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationMeshOpacityList=} obj
 * @returns {CreatureFlatData.animationMeshOpacityList}
 */
CreatureFlatData.animationMeshOpacityList.getRootAsanimationMeshOpacityList = function(bb, obj) {
  return (obj || new CreatureFlatData.animationMeshOpacityList).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {CreatureFlatData.animationMeshOpacityTimeSample=} obj
 * @returns {CreatureFlatData.animationMeshOpacityTimeSample}
 */
CreatureFlatData.animationMeshOpacityList.prototype.timeSamples = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.animationMeshOpacityTimeSample).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.animationMeshOpacityList.prototype.timeSamplesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationMeshOpacityList.startanimationMeshOpacityList = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} timeSamplesOffset
 */
CreatureFlatData.animationMeshOpacityList.addTimeSamples = function(builder, timeSamplesOffset) {
  builder.addFieldOffset(0, timeSamplesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationMeshOpacityList.createTimeSamplesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animationMeshOpacityList.startTimeSamplesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationMeshOpacityList.endanimationMeshOpacityList = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animationClip = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animationClip}
 */
CreatureFlatData.animationClip.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animationClip=} obj
 * @returns {CreatureFlatData.animationClip}
 */
CreatureFlatData.animationClip.getRootAsanimationClip = function(bb, obj) {
  return (obj || new CreatureFlatData.animationClip).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
CreatureFlatData.animationClip.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {CreatureFlatData.animationBonesList=} obj
 * @returns {CreatureFlatData.animationBonesList}
 */
CreatureFlatData.animationClip.prototype.bones = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new CreatureFlatData.animationBonesList).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {CreatureFlatData.animationMeshList=} obj
 * @returns {CreatureFlatData.animationMeshList}
 */
CreatureFlatData.animationClip.prototype.meshes = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new CreatureFlatData.animationMeshList).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {CreatureFlatData.animationUVSwapList=} obj
 * @returns {CreatureFlatData.animationUVSwapList}
 */
CreatureFlatData.animationClip.prototype.uvSwaps = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new CreatureFlatData.animationUVSwapList).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {CreatureFlatData.animationMeshOpacityList=} obj
 * @returns {CreatureFlatData.animationMeshOpacityList}
 */
CreatureFlatData.animationClip.prototype.meshOpacities = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new CreatureFlatData.animationMeshOpacityList).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animationClip.startanimationClip = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
CreatureFlatData.animationClip.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} bonesOffset
 */
CreatureFlatData.animationClip.addBones = function(builder, bonesOffset) {
  builder.addFieldOffset(1, bonesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} meshesOffset
 */
CreatureFlatData.animationClip.addMeshes = function(builder, meshesOffset) {
  builder.addFieldOffset(2, meshesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} uvSwapsOffset
 */
CreatureFlatData.animationClip.addUvSwaps = function(builder, uvSwapsOffset) {
  builder.addFieldOffset(3, uvSwapsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} meshOpacitiesOffset
 */
CreatureFlatData.animationClip.addMeshOpacities = function(builder, meshOpacitiesOffset) {
  builder.addFieldOffset(4, meshOpacitiesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animationClip.endanimationClip = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.animation = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.animation}
 */
CreatureFlatData.animation.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.animation=} obj
 * @returns {CreatureFlatData.animation}
 */
CreatureFlatData.animation.getRootAsanimation = function(bb, obj) {
  return (obj || new CreatureFlatData.animation).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {CreatureFlatData.animationClip=} obj
 * @returns {CreatureFlatData.animationClip}
 */
CreatureFlatData.animation.prototype.clips = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.animationClip).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.animation.prototype.clipsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.animation.startanimation = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} clipsOffset
 */
CreatureFlatData.animation.addClips = function(builder, clipsOffset) {
  builder.addFieldOffset(0, clipsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animation.createClipsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.animation.startClipsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.animation.endanimation = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.uvSwapItemData = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.uvSwapItemData}
 */
CreatureFlatData.uvSwapItemData.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.uvSwapItemData=} obj
 * @returns {CreatureFlatData.uvSwapItemData}
 */
CreatureFlatData.uvSwapItemData.getRootAsuvSwapItemData = function(bb, obj) {
  return (obj || new CreatureFlatData.uvSwapItemData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.uvSwapItemData.prototype.localOffset = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.uvSwapItemData.prototype.localOffsetLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.uvSwapItemData.prototype.localOffsetArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.uvSwapItemData.prototype.globalOffset = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.uvSwapItemData.prototype.globalOffsetLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.uvSwapItemData.prototype.globalOffsetArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.uvSwapItemData.prototype.scale = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.uvSwapItemData.prototype.scaleLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.uvSwapItemData.prototype.scaleArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.uvSwapItemData.prototype.tag = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.uvSwapItemData.startuvSwapItemData = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} localOffsetOffset
 */
CreatureFlatData.uvSwapItemData.addLocalOffset = function(builder, localOffsetOffset) {
  builder.addFieldOffset(0, localOffsetOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.uvSwapItemData.createLocalOffsetVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.uvSwapItemData.startLocalOffsetVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} globalOffsetOffset
 */
CreatureFlatData.uvSwapItemData.addGlobalOffset = function(builder, globalOffsetOffset) {
  builder.addFieldOffset(1, globalOffsetOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.uvSwapItemData.createGlobalOffsetVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.uvSwapItemData.startGlobalOffsetVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} scaleOffset
 */
CreatureFlatData.uvSwapItemData.addScale = function(builder, scaleOffset) {
  builder.addFieldOffset(2, scaleOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.uvSwapItemData.createScaleVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.uvSwapItemData.startScaleVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} tag
 */
CreatureFlatData.uvSwapItemData.addTag = function(builder, tag) {
  builder.addFieldInt32(3, tag, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.uvSwapItemData.enduvSwapItemData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.uvSwapItemMesh = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.uvSwapItemMesh}
 */
CreatureFlatData.uvSwapItemMesh.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.uvSwapItemMesh=} obj
 * @returns {CreatureFlatData.uvSwapItemMesh}
 */
CreatureFlatData.uvSwapItemMesh.getRootAsuvSwapItemMesh = function(bb, obj) {
  return (obj || new CreatureFlatData.uvSwapItemMesh).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
CreatureFlatData.uvSwapItemMesh.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @param {CreatureFlatData.uvSwapItemData=} obj
 * @returns {CreatureFlatData.uvSwapItemData}
 */
CreatureFlatData.uvSwapItemMesh.prototype.items = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new CreatureFlatData.uvSwapItemData).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.uvSwapItemMesh.prototype.itemsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.uvSwapItemMesh.startuvSwapItemMesh = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
CreatureFlatData.uvSwapItemMesh.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} itemsOffset
 */
CreatureFlatData.uvSwapItemMesh.addItems = function(builder, itemsOffset) {
  builder.addFieldOffset(1, itemsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.uvSwapItemMesh.createItemsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.uvSwapItemMesh.startItemsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.uvSwapItemMesh.enduvSwapItemMesh = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.uvSwapItemHolder = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.uvSwapItemHolder}
 */
CreatureFlatData.uvSwapItemHolder.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.uvSwapItemHolder=} obj
 * @returns {CreatureFlatData.uvSwapItemHolder}
 */
CreatureFlatData.uvSwapItemHolder.getRootAsuvSwapItemHolder = function(bb, obj) {
  return (obj || new CreatureFlatData.uvSwapItemHolder).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {CreatureFlatData.uvSwapItemMesh=} obj
 * @returns {CreatureFlatData.uvSwapItemMesh}
 */
CreatureFlatData.uvSwapItemHolder.prototype.meshes = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.uvSwapItemMesh).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.uvSwapItemHolder.prototype.meshesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.uvSwapItemHolder.startuvSwapItemHolder = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} meshesOffset
 */
CreatureFlatData.uvSwapItemHolder.addMeshes = function(builder, meshesOffset) {
  builder.addFieldOffset(0, meshesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.uvSwapItemHolder.createMeshesVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.uvSwapItemHolder.startMeshesVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.uvSwapItemHolder.enduvSwapItemHolder = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.anchorPointData = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.anchorPointData}
 */
CreatureFlatData.anchorPointData.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.anchorPointData=} obj
 * @returns {CreatureFlatData.anchorPointData}
 */
CreatureFlatData.anchorPointData.getRootAsanchorPointData = function(bb, obj) {
  return (obj || new CreatureFlatData.anchorPointData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @returns {number}
 */
CreatureFlatData.anchorPointData.prototype.point = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
};

/**
 * @returns {number}
 */
CreatureFlatData.anchorPointData.prototype.pointLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Float32Array}
 */
CreatureFlatData.anchorPointData.prototype.pointArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array}
 */
CreatureFlatData.anchorPointData.prototype.animClipName = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.anchorPointData.startanchorPointData = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} pointOffset
 */
CreatureFlatData.anchorPointData.addPoint = function(builder, pointOffset) {
  builder.addFieldOffset(0, pointOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.anchorPointData.createPointVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.anchorPointData.startPointVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} animClipNameOffset
 */
CreatureFlatData.anchorPointData.addAnimClipName = function(builder, animClipNameOffset) {
  builder.addFieldOffset(1, animClipNameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.anchorPointData.endanchorPointData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.anchorPointsHolder = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.anchorPointsHolder}
 */
CreatureFlatData.anchorPointsHolder.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.anchorPointsHolder=} obj
 * @returns {CreatureFlatData.anchorPointsHolder}
 */
CreatureFlatData.anchorPointsHolder.getRootAsanchorPointsHolder = function(bb, obj) {
  return (obj || new CreatureFlatData.anchorPointsHolder).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {number} index
 * @param {CreatureFlatData.anchorPointData=} obj
 * @returns {CreatureFlatData.anchorPointData}
 */
CreatureFlatData.anchorPointsHolder.prototype.anchorPoints = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.anchorPointData).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
CreatureFlatData.anchorPointsHolder.prototype.anchorPointsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.anchorPointsHolder.startanchorPointsHolder = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} anchorPointsOffset
 */
CreatureFlatData.anchorPointsHolder.addAnchorPoints = function(builder, anchorPointsOffset) {
  builder.addFieldOffset(0, anchorPointsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.anchorPointsHolder.createAnchorPointsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
CreatureFlatData.anchorPointsHolder.startAnchorPointsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.anchorPointsHolder.endanchorPointsHolder = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
CreatureFlatData.rootData = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CreatureFlatData.rootData}
 */
CreatureFlatData.rootData.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CreatureFlatData.rootData=} obj
 * @returns {CreatureFlatData.rootData}
 */
CreatureFlatData.rootData.getRootAsrootData = function(bb, obj) {
  return (obj || new CreatureFlatData.rootData).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {CreatureFlatData.mesh=} obj
 * @returns {CreatureFlatData.mesh}
 */
CreatureFlatData.rootData.prototype.dataMesh = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new CreatureFlatData.mesh).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {CreatureFlatData.skeleton=} obj
 * @returns {CreatureFlatData.skeleton}
 */
CreatureFlatData.rootData.prototype.dataSkeleton = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new CreatureFlatData.skeleton).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {CreatureFlatData.animation=} obj
 * @returns {CreatureFlatData.animation}
 */
CreatureFlatData.rootData.prototype.dataAnimation = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new CreatureFlatData.animation).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {CreatureFlatData.uvSwapItemHolder=} obj
 * @returns {CreatureFlatData.uvSwapItemHolder}
 */
CreatureFlatData.rootData.prototype.dataUvSwapItem = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? (obj || new CreatureFlatData.uvSwapItemHolder).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {CreatureFlatData.anchorPointsHolder=} obj
 * @returns {CreatureFlatData.anchorPointsHolder}
 */
CreatureFlatData.rootData.prototype.dataAnchorPoints = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new CreatureFlatData.anchorPointsHolder).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
CreatureFlatData.rootData.startrootData = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataMeshOffset
 */
CreatureFlatData.rootData.addDataMesh = function(builder, dataMeshOffset) {
  builder.addFieldOffset(0, dataMeshOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataSkeletonOffset
 */
CreatureFlatData.rootData.addDataSkeleton = function(builder, dataSkeletonOffset) {
  builder.addFieldOffset(1, dataSkeletonOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataAnimationOffset
 */
CreatureFlatData.rootData.addDataAnimation = function(builder, dataAnimationOffset) {
  builder.addFieldOffset(2, dataAnimationOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataUvSwapItemOffset
 */
CreatureFlatData.rootData.addDataUvSwapItem = function(builder, dataUvSwapItemOffset) {
  builder.addFieldOffset(3, dataUvSwapItemOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataAnchorPointsOffset
 */
CreatureFlatData.rootData.addDataAnchorPoints = function(builder, dataAnchorPointsOffset) {
  builder.addFieldOffset(4, dataAnchorPointsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
CreatureFlatData.rootData.endrootData = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
CreatureFlatData.rootData.finishrootDataBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.CreatureFlatData = CreatureFlatData;
